{
  "Random Forrest Classifier": {
    "n_estimators": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 100
    } ,
    "max_depth": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": "None",
      "help_text": "Negative values not accepted"
    } ,
    "min_samples_split": {
      "paramType": [
        "float"
      ] ,
      "options": [] ,
      "default": 2
    } ,
    "min_samples_leaf": {
      "paramType": [
        "float"
      ] ,
      "options": [] ,
      "default": 1,
      "help_text": " min_samples_leaf must be at least 1 or in (0, 0.5]"
    } ,
    "max_features": {
      "paramType": [
        "int" ,
        "string"
      ] ,
      "options": [
        "auto" ,
        "log2" ,
        "sqrt"
      ] ,
      "default": "auto",
      "help_text": "max_features must be in (0, n_features]"
    } ,
    "max_leaf_nodes": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": "None",
      "help_text": "max_leaf_nodes 1 must be either None or larger than 1"
    }
  } ,
  "KNeighbors Classifier": {
    "n_neighbors": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 5,
      "help_text": "Expected n_neighbors > 0"
    } ,
    "weights": {
      "paramType": [
        "str"
      ] ,
      "options": [
        "uniform" ,
        "distance"
      ] ,
      "default": "uniform"
    } ,
    "nearest neighbors algorithm": {
      "paramType": [
        "str"
      ] ,
      "options": [
        "auto" ,
        "ball_tree" ,
        "kd_tree" ,
        "brute"
      ] ,
      "default": "auto"
    } ,
    "leaf_size": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 30,
      "help_text": "leaf_size must be greater than or equal to 1 and Negative values not accepted\""
    }
  } ,
  "Random Forrest Regressor": {
    "n_estimators": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 100,
      "help_text": "Negative values not accepted"
    } ,
    "max_depth": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": "None",
      "help_text": "Negative values not accepted"
    } ,
    "min_samples_split": {
      "paramType": [
        "float"
      ] ,
      "options": [] ,
      "default": 2
    } ,
    "min_samples_leaf": {
      "paramType": [
        "float"
      ] ,
      "options": [] ,
      "default": 1,
      "help_text": "min_samples_leaf must be in (0, 0.5]"
    } ,
    "max_features": {
      "paramType": [
        "int" ,
        "string"
      ] ,
      "options": [
        "auto" ,
        "log2" ,
        "sqrt"
      ] ,
      "default": "auto",
      "help_text": "max_features must be in (0, n_features] "
    } ,
    "max_leaf_nodes": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": "None",
      "help_text": "max_leaf_nodes must be either None or larger than 1 and Negative values not accepted"
    }
  } ,
  "SVM Regression": {
    "C": {
      "paramType": [
        "float"
      ] ,
      "options": [] ,
      "default": 1.0,
      "help_text": "Invalid values are [0,1)  and Negative values not accepted"
    } ,
    "kernel": {
      "paramType": [
        "str"
      ] ,
      "options": [
        "rbf" ,
        "sigmoid" ,
        "poly" ,
        "linear"
      ] ,
      "default": "rbf"
    } ,
    "degree": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 3,
      "help_text": "Negative values not accepted"
    } ,
    "gamma": {
      "paramType": [
        "float" ,
        "str"
      ] ,
      "options": [
        "scale" ,
        "auto"
      ] ,
      "default": "scale"
    } ,
    "max_iter": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": -1
    }
  },
  "SVM Classification": {
    "C": {
      "paramType": [
        "float"
      ] ,
      "options": [] ,
      "default": 1.0,
      "help_text": "Invalid values are [0,1) and Negative values not accepted\" "
    } ,
    "kernel": {
      "paramType": [
        "str"
      ] ,
      "options": [
        "rbf" ,
        "sigmoid" ,
        "poly" ,
        "linear"
      ] ,
      "default": "rbf"
    } ,
    "degree": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 3,
      "help_text": "Negative values not accepted"
    } ,
    "gamma": {
      "paramType": [
        "float" ,
        "str"
      ] ,
      "options": [
        "scale" ,
        "auto"
      ] ,
      "default": "scale",
      "help_text": "The gamma value of [0,1) is  and Negative values not accepted\" "
    } ,
    "max_iter": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": -1,
      "help_text": "The value of [0,1) is invalid and Negative values not accepted\""
    }
  } ,
  "Gaussian Naive Bayes": {
    "var_smoothing": {
      "paramType": [
        "float"
      ] ,
      "options": [] ,
      "default": 1e-09,
      "help_text": "Negative values not accepted"
    }
  } ,
  "Neural Network Classification": {
    "hidden_layer_sizes": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 100,
      "help_text": "The value of [0,1) is invalid and Negative values not accepted\""
    } ,
    "activation": {
      "paramType": [
        "str"
      ] ,
      "options": [
        "identity" ,
        "logistic",
        "tanh" ,
        "relu"
      ] ,
      "default": "relu"
    } ,
    "alpha": {
      "paramType": [
        "float"
      ] ,
      "options": [] ,
      "default": 0.0001,
      "help_text": "Negative values not accepted"
    } ,
    "learning_rate": {
      "paramType": [
        "str"
      ] ,
      "options": [
        "constant" ,
        "invscaling" ,
        "adaptive"
      ] ,
      "default": "constant"
    } ,
    "max_iter": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 200,
      "help_text": "The value of [0,1) is invalid and Negative values not accepted\""
    }
  },
  "Neural Network Regression": {
     "hidden_layer_sizes": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 100,
      "help_text": "The value of [0,1) is invalid and Negative values not accepted\" "
    } ,
    "activation": {
      "paramType": [
        "str"
      ] ,
      "options": [
        "identity" ,
        "logistic",
        "tanh" ,
        "relu"
      ] ,
      "default": "relu"
    } ,
    "alpha": {
      "paramType": [
        "float"
      ] ,
      "options": [] ,
      "default": 0.0001
    } ,
    "learning_rate": {
      "paramType": [
        "str"
      ] ,
      "options": [
        "constant" ,
        "invscaling" ,
        "adaptive"
      ] ,
      "default": "constant"
    } ,
    "max_iter": {
      "paramType": [
        "int"
      ] ,
      "options": [] ,
      "default": 200,
      "help_text": "The value of [0,1) is invalid  and Negative values not accepted"
    }
  },
  "Linear Regression": {
    "fit_intercept": {
      "paramType": [
        "bool"
      ] ,
      "options": [] ,
      "default": "True",
      "help_text": "Value can be either True or False."
    }
  }
}